test"use client""use client"



import { useRef, useState } from "react"import { useRef, useState } from "react"

import { Canvas, useFrame } from "@react-three/fiber"import { Canvas, useFrame } from "@react-three/fiber"

import { Environment, Html, OrbitControls } from "@react-three/drei"import { OrbitControls, Html, Environment } from "@react-three/drei"

import * as THREE from "three"import { ClientOnlyWrapper } from "./client-only-wrapper"

import * as THREE from "three"

import { Progress } from "@/components/ui/progress"import { Progress } from "@/components/ui/progress"

import { ClientOnlyWrapper } from "./client-only-wrapper"

interface RepairOperation {

type Vector3Tuple = [number, number, number]  id: string

  satelliteName: string

type OperationStatus = "pending" | "in-progress" | "completed" | "waiting-materials"  operation: "repair" | "replace" | "upgrade"

  component: string

export interface RepairOperation {  materialsNeeded?: { material: string; amount: number }[]

  id: string  duration: number

  satelliteName: string  progress: number

  operation: "repair" | "replace" | "upgrade"  status: "pending" | "in-progress" | "completed" | "waiting-materials"

  component: string}

  materialsNeeded?: { material: string; amount: number }[]

  duration: numberfunction isEmissiveMaterial(

  progress: number  material: THREE.Material,

  status: OperationStatus): material is THREE.MeshStandardMaterial | THREE.MeshPhysicalMaterial {

}  return material instanceof THREE.MeshStandardMaterial || material instanceof THREE.MeshPhysicalMaterial

}

function isEmissiveMaterial(

  material: THREE.Material,function updateEmissiveIntensity(mesh: THREE.Mesh | null, intensity: number) {

): material is THREE.MeshStandardMaterial | THREE.MeshPhysicalMaterial {  if (!mesh) return

  return material instanceof THREE.MeshStandardMaterial || material instanceof THREE.MeshPhysicalMaterial  const { material } = mesh

}

      {/* Top frame */}

function applyEmissiveIntensity(mesh: THREE.Mesh | null, intensity: number) {      <mesh position={[0, 0.6, -0.25]}>

  if (!mesh) return        <boxGeometry args={[0.5, 0.03, 0.03]} />

  const { material } = mesh        <meshStandardMaterial color="#6B7280" metalness={0.7} roughness={0.3} />

      </mesh>

  if (Array.isArray(material)) {      <mesh position={[0, 0.6, 0.25]}>

    material.forEach((childMaterial) => {        <boxGeometry args={[0.5, 0.03, 0.03]} />

      if (isEmissiveMaterial(childMaterial)) {        <meshStandardMaterial color="#6B7280" metalness={0.7} roughness={0.3} />

        childMaterial.emissiveIntensity = intensity      </mesh>

      }

    })      {/* Enhanced print bed */}

  } else if (isEmissiveMaterial(material)) {      <mesh position={[0, -0.1, 0]}>

    material.emissiveIntensity = intensity        <boxGeometry args={[0.4, 0.02, 0.4]} />

  }        <meshStandardMaterial color="#1F2937" metalness={0.3} roughness={0.7} />

}      </mesh>



function RoboticArm({      {/* Print object being created */}

  position,      {isActive && (

  rotation,        <mesh ref={printObjectRef} position={[0, -0.05, 0]}>

  isActive,          <boxGeometry args={[0.08, 0.1, 0.08]} />

}: {          <meshStandardMaterial color="#8B5CF6" metalness={0.2} roughness={0.8} transparent opacity={0.8} />

  position: Vector3Tuple        </mesh>

  rotation: Vector3Tuple      )}

  isActive: boolean

}) {      {/* Enhanced extruder with heating element */}

  const armRef = useRef<THREE.Group>(null)      <mesh ref={extruderRef} position={[0, 0.3, 0]}>

  const joint1Ref = useRef<THREE.Mesh>(null)        <boxGeometry args={[0.08, 0.08, 0.08]} />

  const joint2Ref = useRef<THREE.Mesh>(null)        <meshStandardMaterial

  const effectorRef = useRef<THREE.Mesh>(null)          color={isActive ? "#8B5CF6" : "#4B5563"}

  const animationPhaseRef = useRef(Math.random() * Math.PI * 2)          metalness={0.8}

  const [activityProgress, setActivityProgress] = useState(0)          roughness={0.2}

  const lastHudProgressRef = useRef(0)          emissive={isActive ? "#8B5CF6" : "#000000"}

          emissiveIntensity={isActive ? 0.4 : 0}

  useFrame((state) => {        />

    const phase = animationPhaseRef.current      </mesh>

    const time = state.clock.getElapsedTime()

      {/* Heating nozzle */}

    if (!isActive) {      <mesh position={[0, 0.25, 0]}>

      if (lastHudProgressRef.current !== 0) {        <coneGeometry args={[0.02, 0.04, 8]} />

        lastHudProgressRef.current = 0        <meshStandardMaterial

        setActivityProgress(0)          color={isActive ? "#FF4500" : "#6B7280"}

      }          emissive={isActive ? "#FF2200" : "#000000"}

      return          emissiveIntensity={isActive ? 0.6 : 0}

    }        />

      </mesh>

    if (armRef.current) {

      armRef.current.rotation.y = Math.sin(time * 0.4 + phase) * 0.5      {/* Filament feed */}

    }      <mesh position={[0, 0.5, 0]}>

        <cylinderGeometry args={[0.01, 0.01, 0.3]} />

    if (joint1Ref.current) {        <meshStandardMaterial color="#F59E0B" metalness={0.1} roughness={0.9} />

      joint1Ref.current.rotation.z = Math.cos(time * 0.6 + phase) * 0.3      </mesh>

    }

      {/* Enhanced print progress indicator */}

    if (joint2Ref.current) {      {isActive && (

      joint2Ref.current.rotation.x = Math.sin(time * 0.8 + phase) * 0.4        <Html position={[0, 0.8, 0]} center>

    }          <div className="bg-purple-900/70 backdrop-blur-sm border border-purple-500/70 rounded-lg px-4 py-3 text-sm text-purple-300 font-mono">

            <div className="flex items-center gap-2 mb-2">

    if (effectorRef.current) {              <div className="w-2 h-2 bg-purple-400 rounded-full animate-pulse"></div>

      effectorRef.current.scale.x = 1 + Math.sin(time * 2 + phase) * 0.2              <span>PRINTING ACTIVE</span>

      applyEmissiveIntensity(effectorRef.current, 0.3 + Math.sin(time * 3 + phase) * 0.2)            </div>

    }            <div className="text-xs text-purple-400/70">Progress: {printProgress}%</div>

            <Progress

    const hudProgress = Math.floor((Math.sin(time * 0.6 + phase) + 1) * 50)              value={printProgress}

    if (hudProgress !== lastHudProgressRef.current) {              className="w-20 h-1 bg-purple-900 rounded-full mt-1 border border-purple-500/40 [&_[data-slot=progress-indicator]]:bg-purple-400"

      lastHudProgressRef.current = hudProgress            />

      setActivityProgress(hudProgress)          </div>

    }        </Html>

  })      )}

    </group>

  return (  )

    <group ref={armRef} position={position} rotation={rotation}>}

      <mesh position={[0, 0, 0]}>

        <cylinderGeometry args={[0.15, 0.2, 0.1]} />function DebrisCollectionArm({

        <meshStandardMaterial color="#2563EB" metalness={0.8} roughness={0.2} />  position,

      </mesh>  rotation,

  isActive,

      <mesh position={[0, 0.05, 0]}>}: { position: [number, number, number]; rotation: [number, number, number]; isActive: boolean }) {

        <torusGeometry args={[0.18, 0.02, 8, 16]} />  const armRef = useRef<THREE.Group>(null)

        <meshStandardMaterial  const scannerRef = useRef<THREE.Mesh>(null)

          color={isActive ? "#10B981" : "#6B7280"}  const magnetRef = useRef<THREE.Mesh>(null)

          emissive={isActive ? "#10B981" : "#000000"}  const debrisRef = useRef<THREE.Mesh>(null)

          emissiveIntensity={isActive ? 0.2 : 0}

        />  useFrame((state) => {

      </mesh>    if (armRef.current && isActive) {

      const time = state.clock.getElapsedTime()

      <mesh position={[0, 0.3, 0]}>

        <cylinderGeometry args={[0.08, 0.08, 0.5]} />      // Scanning motion

        <meshStandardMaterial color="#1E40AF" metalness={0.7} roughness={0.3} />      armRef.current.rotation.y = Math.sin(time * 0.3) * 1.2

      </mesh>

      if (scannerRef.current) {

      <mesh ref={joint1Ref} position={[0.15, 0.55, 0]}>        scannerRef.current.rotation.z += 0.05

        <sphereGeometry args={[0.09]} />        updateEmissiveIntensity(scannerRef.current, 0.5 + Math.sin(time * 4) * 0.3)

        <meshStandardMaterial color="#3B82F6" metalness={0.85} roughness={0.2} />      }

      </mesh>

      if (magnetRef.current) {

      <mesh ref={joint2Ref} position={[0.32, 0.95, 0]}>        updateEmissiveIntensity(magnetRef.current, 0.3 + Math.sin(time * 2) * 0.2)

        <sphereGeometry args={[0.08]} />      }

        <meshStandardMaterial color="#3B82F6" metalness={0.9} roughness={0.1} />

      </mesh>      // Simulate debris capture

      if (debrisRef.current) {

      <mesh ref={effectorRef} position={[0.35, 1.0, 0]}>        debrisRef.current.position.y = -0.2 + Math.sin(time * 0.8) * 0.1

        <boxGeometry args={[0.12, 0.08, 0.08]} />        debrisRef.current.rotation.x += 0.02

        <meshStandardMaterial        debrisRef.current.rotation.y += 0.01

          color={isActive ? "#10B981" : "#6B7280"}      }

          emissive={isActive ? "#10B981" : "#000000"}    }

          emissiveIntensity={isActive ? 0.3 : 0}  })

          metalness={0.8}

          roughness={0.2}  return (

        />    <group ref={armRef} position={position} rotation={rotation}>

      </mesh>      {/* Base with enhanced sensors */}

      <mesh position={[0, 0, 0]}>

      <mesh position={[0.42, 1.0, 0.03]}>        <cylinderGeometry args={[0.2, 0.25, 0.15]} />

        <boxGeometry args={[0.06, 0.02, 0.02]} />        <meshStandardMaterial color="#059669" metalness={0.8} roughness={0.2} />

        <meshStandardMaterial color="#10B981" metalness={0.8} roughness={0.2} />      </mesh>

      </mesh>

      <mesh position={[0.42, 1.0, -0.03]}>      {/* Sensor array */}

        <boxGeometry args={[0.06, 0.02, 0.02]} />      <mesh position={[0, 0.08, 0]}>

        <meshStandardMaterial color="#10B981" metalness={0.8} roughness={0.2} />        <torusGeometry args={[0.22, 0.03, 8, 16]} />

      </mesh>        <meshStandardMaterial

          color={isActive ? "#10B981" : "#6B7280"}

      {isActive && (          emissive={isActive ? "#10B981" : "#000000"}

        <Html position={[0.5, 1.3, 0]} center>          emissiveIntensity={isActive ? 0.4 : 0}

          <div className="bg-green-500/30 backdrop-blur-sm border border-green-500/70 rounded-lg px-3 py-2 text-xs text-green-300 font-mono animate-pulse">        />

            <div className="flex items-center gap-2 mb-2">      </mesh>

              <div className="w-2 h-2 bg-green-400 rounded-full animate-ping"></div>

              MANIPULATING      {/* Main arm with debris scanner */}

            </div>      <mesh position={[0, 0.4, 0]}>

            <div className="text-xs text-green-400/70">Progress: {activityProgress}%</div>        <cylinderGeometry args={[0.06, 0.06, 0.6]} />

            <Progress        <meshStandardMaterial color="#047857" metalness={0.7} roughness={0.3} />

              value={activityProgress}      </mesh>

              className="w-20 h-1 bg-green-900 rounded-full mt-1 border border-green-500/40 [&_[data-slot=progress-indicator]]:bg-green-400"

            />      {/* Debris scanner head */}

          </div>      <mesh ref={scannerRef} position={[0, 0.8, 0]}>

        </Html>        <coneGeometry args={[0.12, 0.2, 8]} />

      )}        <meshStandardMaterial

    </group>          color={isActive ? "#10B981" : "#374151"}

  )          emissive={isActive ? "#10B981" : "#000000"}

}          emissiveIntensity={isActive ? 0.6 : 0}

        />

function Furnace({ position, isActive }: { position: Vector3Tuple; isActive: boolean }) {      </mesh>

  const furnaceRef = useRef<THREE.Group>(null)

  const glowRef = useRef<THREE.Mesh>(null)      {/* Magnetic gripper */}

  const processingRef = useRef<THREE.Mesh>(null)      <mesh ref={magnetRef} position={[0, 0.9, 0]}>

  const outputRef = useRef<THREE.Mesh>(null)        <sphereGeometry args={[0.08]} />

        <meshStandardMaterial

  useFrame((state) => {          color="#DC2626"

    const time = state.clock.getElapsedTime()          emissive={isActive ? "#DC2626" : "#000000"}

          emissiveIntensity={isActive ? 0.4 : 0}

    if (glowRef.current && isActive) {          metalness={0.9}

      applyEmissiveIntensity(glowRef.current, 0.6 + Math.sin(time * 3) * 0.3)          roughness={0.1}

      glowRef.current.scale.setScalar(1 + Math.sin(time * 2) * 0.05)        />

    }      </mesh>



    if (processingRef.current && isActive) {      {/* Captured debris */}

      processingRef.current.rotation.y += 0.03      {isActive && (

      applyEmissiveIntensity(processingRef.current, 0.3 + Math.sin(time * 4) * 0.2)        <mesh ref={debrisRef} position={[0, 1.1, 0]}>

    }          <dodecahedronGeometry args={[0.04]} />

          <meshStandardMaterial color="#6B7280" metalness={0.8} roughness={0.4} />

    if (outputRef.current && isActive) {        </mesh>

      outputRef.current.position.y = 0.1 + Math.sin(time * 1.5) * 0.02      )}

    }

  })      {/* Collection status */}

      {isActive && (

  return (        <Html position={[0.3, 1.2, 0]} center>

    <group ref={furnaceRef} position={position}>          <div className="bg-green-900/70 backdrop-blur-sm border border-green-500/70 rounded-lg px-3 py-2 text-xs text-green-300 font-mono">

      <mesh>            <div className="flex items-center gap-2 mb-1">

        <cylinderGeometry args={[0.35, 0.4, 0.7]} />              <div className="w-2 h-2 bg-green-400 rounded-full animate-ping"></div>

        <meshStandardMaterial color="#111827" metalness={0.7} roughness={0.3} />              DEBRIS SCAN

      </mesh>            </div>

            <div className="text-xs text-green-400/70">Objects: {Math.floor(Math.random() * 15) + 5}</div>

      <mesh position={[0, 0.4, 0]}>            <div className="text-xs text-green-400/70">Range: 2.5km</div>

        <cylinderGeometry args={[0.25, 0.28, 0.4]} />          </div>

        <meshStandardMaterial color="#1F2937" metalness={0.6} roughness={0.4} />        </Html>

      </mesh>      )}

    </group>

      <mesh position={[0, 0.2, 0]}>  )

        <cylinderGeometry args={[0.18, 0.18, 0.35]} />}

        <meshStandardMaterial

          color={isActive ? "#F97316" : "#374151"}function RepairStation({

          emissive={isActive ? "#FBBF24" : "#000000"}  position,

          emissiveIntensity={isActive ? 0.4 : 0}  isActive,

        />            {currentOperation ? (

      </mesh>              <>

                <div className="text-xs text-blue-400/70">Target: {currentOperation.satelliteName}</div>

      <mesh ref={glowRef} position={[0, 0.2, 0]}>                <div className="text-xs text-blue-400/70">Operation: {currentOperation.operation.toUpperCase()}</div>

        <cylinderGeometry args={[0.16, 0.16, 0.32]} />                <div className="text-xs text-blue-400/70">Component: {currentOperation.component}</div>

        <meshStandardMaterial color="#F59E0B" emissive="#FFD580" emissiveIntensity={0.6} transparent opacity={0.6} />                <div className="text-xs text-blue-400/70">Progress: {Math.round(currentOperation.progress)}%</div>

      </mesh>                <Progress

                  value={currentOperation.progress}

      <mesh ref={processingRef} position={[0, 0.5, 0]}>                  className="w-20 h-1 bg-blue-900 rounded-full mt-1 border border-blue-500/40 [&_[data-slot=progress-indicator]]:bg-blue-400"

        <torusGeometry args={[0.2, 0.04, 16, 32]} />                />

        <meshStandardMaterial color="#FBBF24" metalness={0.5} roughness={0.4} />              </>

      </mesh>            ) : (

              <div className="text-xs text-blue-400/70">

      <mesh ref={outputRef} position={[0, 0.65, 0]}>                STANDBY MODE

        <boxGeometry args={[0.18, 0.05, 0.18]} />                <br />

        <meshStandardMaterial color="#FCD34D" metalness={0.4} roughness={0.4} />                Awaiting assignment...

      </mesh>              </div>

            )}

      {isActive && (  useFrame((state) => {

        <Html position={[0, 0.9, 0]} center>    const time = state.clock.getElapsedTime()

          <div className="bg-red-900/70 backdrop-blur-sm border border-red-500/70 rounded-lg px-3 py-2 text-xs text-red-300 font-mono">

            <div className="flex items-center gap-2 mb-1">    if (toolRef.current && isActive && currentOperation?.status === "in-progress") {

              <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse"></div>      // Realistic repair tool movement

              PROCESSING      toolRef.current.rotation.z = Math.sin(time * 3) * 0.2

            </div>      toolRef.current.position.y = 0.2 + Math.sin(time * 2) * 0.03

            <div className="text-xs text-red-400/70">Temp: {1650 + Math.floor(Math.sin(Date.now() * 0.01) * 50)}°C</div>    }

            <div className="text-xs text-red-400/70">Output: {Math.floor(Math.random() * 50) + 25}kg/h</div>

            <div className="text-xs text-green-400/70">Materials: Al, Ti, Fe</div>    if (repairArmRef.current && isActive && currentOperation?.status === "in-progress") {

          </div>      // Repair arm working motion

        </Html>      repairArmRef.current.rotation.x = Math.sin(time * 1.5) * 0.3

      )}      repairArmRef.current.position.z = Math.cos(time * 1.2) * 0.05

    </group>    }

  )

}    if (diagnosticRef.current && isActive) {

      updateEmissiveIntensity(diagnosticRef.current, 0.4 + Math.sin(time * 3) * 0.2)

function Printer3D({ position, isActive }: { position: Vector3Tuple; isActive: boolean }) {    }

  const printerRef = useRef<THREE.Group>(null)

  const extruderRef = useRef<THREE.Mesh>(null)    // Sparks animation during repair

  const printObjectRef = useRef<THREE.Mesh>(null)    if (sparksRef.current && currentOperation?.status === "in-progress") {

  const [printProgress, setPrintProgress] = useState(0)      sparksRef.current.children.forEach((spark, i) => {

  const lastProgressRef = useRef(0)        spark.position.y += Math.random() * 0.02

  const framePositions: Vector3Tuple[] = [        spark.position.x += (Math.random() - 0.5) * 0.01

    [-0.25, 0.2, -0.25],        spark.position.z += (Math.random() - 0.5) * 0.01

    [0.25, 0.2, -0.25],        if (spark.position.y > 0.5) {

    [-0.25, 0.2, 0.25],          spark.position.y = 0.2

    [0.25, 0.2, 0.25],          spark.position.x = (Math.random() - 0.5) * 0.1

  ]          spark.position.z = (Math.random() - 0.5) * 0.1

        }

  useFrame((state) => {      })

    const time = state.clock.getElapsedTime()    }

  })

    if (extruderRef.current && isActive) {

      const layer = Math.floor(time * 0.5) % 10  return (

      extruderRef.current.position.x = Math.sin(time * 2) * 0.15    <group ref={stationRef} position={position}>

      extruderRef.current.position.z = Math.cos(time * 1.8) * 0.15      {/* Base platform */}

      extruderRef.current.position.y = 0.3 - layer * 0.02      <mesh position={[0, -0.1, 0]}>

    }        <cylinderGeometry args={[0.4, 0.4, 0.1]} />

        <meshStandardMaterial color="#1E40AF" metalness={0.6} roughness={0.4} />

    if (printObjectRef.current && isActive) {      </mesh>

      const progress = (Math.sin(time * 0.3) + 1) * 0.5

      const normalizedProgress = Math.floor(progress * 100)      {/* Repair tools array */}

      if (normalizedProgress !== lastProgressRef.current) {      <mesh position={[-0.2, 0.1, 0]}>

        lastProgressRef.current = normalizedProgress        <boxGeometry args={[0.15, 0.3, 0.08]} />

        setPrintProgress(normalizedProgress)        <meshStandardMaterial color="#374151" metalness={0.7} roughness={0.3} />

      }      </mesh>

      printObjectRef.current.scale.y = progress

      printObjectRef.current.position.y = -0.05 + progress * 0.05      {/* Active repair tool */}

    }      <mesh ref={toolRef} position={[-0.2, 0.2, 0]}>

  })        <cylinderGeometry args={[0.02, 0.02, 0.15]} />

        <meshStandardMaterial

  return (          color={isActive ? "#F59E0B" : "#6B7280"}

    <group ref={printerRef} position={position}>          emissive={isActive ? "#F59E0B" : "#000000"}

      <mesh position={[0, -0.2, 0]}>          emissiveIntensity={isActive ? 0.3 : 0}

        <boxGeometry args={[0.6, 0.05, 0.6]} />        />

        <meshStandardMaterial color="#374151" metalness={0.5} roughness={0.5} />      </mesh>

      </mesh>

      <mesh ref={repairArmRef} position={[0.2, 0.2, 0]}>

      {framePositions.map((framePosition, index) => (        <boxGeometry args={[0.08, 0.25, 0.06]} />

        <mesh key={index} position={framePosition}>        <meshStandardMaterial

          <boxGeometry args={[0.03, 0.8, 0.03]} />          color={currentOperation?.status === "in-progress" ? "#10B981" : "#4B5563"}

          <meshStandardMaterial color="#6B7280" metalness={0.7} roughness={0.3} />          emissive={currentOperation?.status === "in-progress" ? "#10B981" : "#000000"}

        </mesh>          emissiveIntensity={currentOperation?.status === "in-progress" ? 0.4 : 0}

      ))}        />

      </mesh>

      <mesh position={[0, 0.6, -0.25]}>

        <boxGeometry args={[0.5, 0.03, 0.03]} />      {/* Diagnostic scanner */}

        <meshStandardMaterial color="#6B7280" metalness={0.7} roughness={0.3} />      <mesh ref={diagnosticRef} position={[0.2, 0.15, 0]}>

      </mesh>        <boxGeometry args={[0.12, 0.12, 0.06]} />

      <mesh position={[0, 0.6, 0.25]}>        <meshStandardMaterial

        <boxGeometry args={[0.5, 0.03, 0.03]} />          color={isActive ? "#8B5CF6" : "#4B5563"}

        <meshStandardMaterial color="#6B7280" metalness={0.7} roughness={0.3} />          emissive={isActive ? "#8B5CF6" : "#000000"}

      </mesh>          emissiveIntensity={isActive ? 0.5 : 0}

        />

      <mesh position={[0, -0.1, 0]}>      </mesh>

        <boxGeometry args={[0.4, 0.02, 0.4]} />

        <meshStandardMaterial color="#1F2937" metalness={0.3} roughness={0.7} />      {currentOperation?.status === "in-progress" && (

      </mesh>        <group ref={sparksRef}>

          {Array.from({ length: 8 }).map((_, i) => (

      {isActive && (            <mesh key={i} position={[Math.random() * 0.1 - 0.05, 0.2, Math.random() * 0.1 - 0.05]}>

        <mesh ref={printObjectRef} position={[0, -0.05, 0]}>              <sphereGeometry args={[0.005]} />

          <boxGeometry args={[0.08, 0.1, 0.08]} />              <meshBasicMaterial color="#FFD700" />

          <meshStandardMaterial color="#8B5CF6" metalness={0.2} roughness={0.8} transparent opacity={0.8} />            </mesh>

        </mesh>          ))}

      )}        </group>

      )}

      <mesh ref={extruderRef} position={[0, 0.3, 0]}>

        <boxGeometry args={[0.08, 0.08, 0.08]} />      {/* Holographic display */}

        <meshStandardMaterial      {isActive && (

          color={isActive ? "#8B5CF6" : "#4B5563"}        <mesh position={[0, 0.4, 0]}>

          metalness={0.8}          <planeGeometry args={[0.3, 0.2]} />

          roughness={0.2}          <meshBasicMaterial color="#00FFFF" transparent opacity={0.6} blending={THREE.AdditiveBlending} />

          emissive={isActive ? "#8B5CF6" : "#000000"}        </mesh>

          emissiveIntensity={isActive ? 0.4 : 0}      )}

        />

      </mesh>      {isActive && (

        <Html position={[0, 0.6, 0]} center>

      <mesh position={[0, 0.25, 0]}>          <div className="bg-blue-900/70 backdrop-blur-sm border border-blue-500/70 rounded-lg px-3 py-2 text-xs text-blue-300 font-mono">

        <coneGeometry args={[0.02, 0.04, 8]} />            <div className="flex items-center gap-2 mb-1">

        <meshStandardMaterial              <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>

          color={isActive ? "#FF4500" : "#6B7280"}              HERMES REPAIR STATION

          emissive={isActive ? "#FF2200" : "#000000"}            </div>

          emissiveIntensity={isActive ? 0.6 : 0}            {currentOperation ? (

        />              <>

      </mesh>                <div className="text-xs text-blue-400/70">Target: {currentOperation.satelliteName}</div>

                <div className="text-xs text-blue-400/70">Operation: {currentOperation.operation.toUpperCase()}</div>

      <mesh position={[0, 0.5, 0]}>                <div className="text-xs text-blue-400/70">Component: {currentOperation.component}</div>

        <cylinderGeometry args={[0.01, 0.01, 0.3]} />                <div className="text-xs text-blue-400/70">Progress: {Math.round(currentOperation.progress)}%</div>

        <meshStandardMaterial color="#F59E0B" metalness={0.1} roughness={0.9} />                <Progress

      </mesh>                  value={currentOperation.progress}

                  className="w-20 h-1 bg-blue-900 rounded-full mt-1 border border-blue-500/40 [&_[data-slot=progress-indicator]]:bg-blue-400"

      {isActive && (                />

        <Html position={[0, 0.8, 0]} center>              </>

          <div className="bg-purple-900/70 backdrop-blur-sm border border-purple-500/70 rounded-lg px-4 py-3 text-sm text-purple-300 font-mono">    </group>

            <div className="flex items-center gap-2 mb-2">  )

              <div className="w-2 h-2 bg-purple-400 rounded-full animate-pulse"></div>}

              <span>PRINTING ACTIVE</span>

            </div>export default function SatelliteInteriorScene({ activeSystem, currentOperation }: { activeSystem: string | null, currentOperation?: RepairOperation }) {

            <div className="text-xs text-purple-400/70">Progress: {printProgress}%</div>  return (

            <Progress    <ClientOnlyWrapper>

              value={printProgress}      <Canvas camera={{ position: [3, 2.5, 3], fov: 60 }}>

              className="w-20 h-1 bg-purple-900 rounded-full mt-1 border border-purple-500/40 [&_[data-slot=progress-indicator]]:bg-purple-400"        {/* Enhanced lighting for better visibility */}

            />        <ambientLight intensity={0.5} />

          </div>        <pointLight position={[2, 2, 2]} intensity={1.2} color="#ffffff" />

        </Html>        <pointLight position={[-2, 1, -1]} intensity={0.8} color="#3B82F6" />

      )}        <spotLight position={[0, 3, 0]} intensity={1} angle={0.6} penumbra={0.5} />

    </group>        <pointLight position={[0, 1, 2]} intensity={0.6} color="#10B981" />

  )

}        <Environment preset="warehouse" />



function DebrisCollectionArm({        {/* Interior walls with enhanced detail */}

  position,        <mesh position={[0, 0, -2]}>

  rotation,          <boxGeometry args={[4, 3, 0.1]} />

  isActive,          <meshStandardMaterial color="#1E293B" metalness={0.3} roughness={0.7} />

}: {        </mesh>

  position: Vector3Tuple        <mesh position={[-2, 0, 0]} rotation={[0, Math.PI / 2, 0]}>

  rotation: Vector3Tuple          <boxGeometry args={[4, 3, 0.1]} />

  isActive: boolean          <meshStandardMaterial color="#1E293B" metalness={0.3} roughness={0.7} />

}) {        </mesh>

  const armRef = useRef<THREE.Group>(null)        <mesh position={[2, 0, 0]} rotation={[0, -Math.PI / 2, 0]}>

  const scannerRef = useRef<THREE.Mesh>(null)          <boxGeometry args={[4, 3, 0.1]} />

  const magnetRef = useRef<THREE.Mesh>(null)          <meshStandardMaterial color="#1E293B" metalness={0.3} roughness={0.7} />

  const debrisRef = useRef<THREE.Mesh>(null)        </mesh>



  useFrame((state) => {        {/* Enhanced floor with grid pattern */}

    if (!armRef.current || !isActive) {        <mesh position={[0, -1.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>

      return          <boxGeometry args={[4, 4, 0.1]} />

    }          <meshStandardMaterial color="#0F172A" metalness={0.5} roughness={0.5} />

        </mesh>

    const time = state.clock.getElapsedTime()

        <DebrisCollectionArm

    armRef.current.rotation.y = Math.sin(time * 0.3) * 1.2          position={[-1.2, -0.5, 1]}

          rotation={[0, -Math.PI / 4, 0]}

    if (scannerRef.current) {          isActive={activeSystem === "debris-collector"}

      scannerRef.current.rotation.z += 0.05        />

      applyEmissiveIntensity(scannerRef.current, 0.5 + Math.sin(time * 4) * 0.3)        <RepairStation

    }          position={[1.2, -0.8, 1]}

          isActive={activeSystem === "repair-station"}

    if (magnetRef.current) {          currentOperation={currentOperation}

      applyEmissiveIntensity(magnetRef.current, 0.3 + Math.sin(time * 2) * 0.2)        />

    }        <Furnace position={[0, -0.5, -1.2]} isActive={activeSystem === "furnace"} />

        <Printer3D position={[1.2, -0.5, -1.2]} isActive={activeSystem === "printer"} />

    if (debrisRef.current) {        <RoboticArm position={[-1.2, -0.5, -0.2]} rotation={[0, Math.PI / 6, 0]} isActive={activeSystem === "arm1"} />

      debrisRef.current.position.y = -0.2 + Math.sin(time * 0.8) * 0.1        <RoboticArm position={[0.8, -0.5, 0.2]} rotation={[0, -Math.PI / 3, 0]} isActive={activeSystem === "arm2"} />

      debrisRef.current.rotation.x += 0.02

      debrisRef.current.rotation.y += 0.01        <OrbitControls

    }          enablePan={true}

  })          enableZoom={true}

          enableRotate={true}

  return (          minDistance={2}

    <group ref={armRef} position={position} rotation={rotation}>          maxDistance={10}

      <mesh position={[0, 0, 0]}>          maxPolarAngle={Math.PI / 2}

        <cylinderGeometry args={[0.2, 0.25, 0.15]} />        />

        <meshStandardMaterial color="#059669" metalness={0.8} roughness={0.2} />      </Canvas>

      </mesh>    </ClientOnlyWrapper>

  )

      <mesh position={[0, 0.08, 0]}>}
        <torusGeometry args={[0.22, 0.03, 8, 16]} />
        <meshStandardMaterial
          color={isActive ? "#10B981" : "#6B7280"}
          emissive={isActive ? "#10B981" : "#000000"}
          emissiveIntensity={isActive ? 0.4 : 0}
        />
      </mesh>

      <mesh position={[0, 0.4, 0]}>
        <cylinderGeometry args={[0.06, 0.06, 0.6]} />
        <meshStandardMaterial color="#047857" metalness={0.7} roughness={0.3} />
      </mesh>

      <mesh ref={scannerRef} position={[0, 0.8, 0]}>
        <coneGeometry args={[0.12, 0.2, 8]} />
        <meshStandardMaterial
          color={isActive ? "#10B981" : "#374151"}
          emissive={isActive ? "#10B981" : "#000000"}
          emissiveIntensity={isActive ? 0.6 : 0}
        />
      </mesh>

      <mesh ref={magnetRef} position={[0, 0.9, 0]}>
        <sphereGeometry args={[0.08]} />
        <meshStandardMaterial
          color="#DC2626"
          emissive={isActive ? "#DC2626" : "#000000"}
          emissiveIntensity={isActive ? 0.4 : 0}
          metalness={0.9}
          roughness={0.1}
        />
      </mesh>

      {isActive && (
        <mesh ref={debrisRef} position={[0, 1.1, 0]}>
          <dodecahedronGeometry args={[0.04]} />
          <meshStandardMaterial color="#6B7280" metalness={0.8} roughness={0.4} />
        </mesh>
      )}

      {isActive && (
        <Html position={[0.3, 1.2, 0]} center>
          <div className="bg-green-900/70 backdrop-blur-sm border border-green-500/70 rounded-lg px-3 py-2 text-xs text-green-300 font-mono">
            <div className="flex items-center gap-2 mb-1">
              <div className="w-2 h-2 bg-green-400 rounded-full animate-ping"></div>
              DEBRIS SCAN
            </div>
            <div className="text-xs text-green-400/70">Objects: {Math.floor(Math.random() * 15) + 5}</div>
            <div className="text-xs text-green-400/70">Range: 2.5km</div>
          </div>
        </Html>
      )}
    </group>
  )
}

function RepairStation({
  position,
  isActive,
  currentOperation,
}: {
  position: Vector3Tuple
  isActive: boolean
  currentOperation?: RepairOperation
}) {
  const stationRef = useRef<THREE.Group>(null)
  const toolRef = useRef<THREE.Mesh>(null)
  const diagnosticRef = useRef<THREE.Mesh>(null)
  const repairArmRef = useRef<THREE.Mesh>(null)
  const sparksRef = useRef<THREE.Group>(null)

  useFrame((state) => {
    const time = state.clock.getElapsedTime()

    if (toolRef.current && isActive && currentOperation?.status === "in-progress") {
      toolRef.current.rotation.z = Math.sin(time * 3) * 0.2
      toolRef.current.position.y = 0.2 + Math.sin(time * 2) * 0.03
    }

    if (repairArmRef.current && isActive && currentOperation?.status === "in-progress") {
      repairArmRef.current.rotation.x = Math.sin(time * 1.5) * 0.3
      repairArmRef.current.position.z = Math.cos(time * 1.2) * 0.05
    }

    if (diagnosticRef.current && isActive) {
      applyEmissiveIntensity(diagnosticRef.current, 0.4 + Math.sin(time * 3) * 0.2)
    }

    if (sparksRef.current && currentOperation?.status === "in-progress") {
      sparksRef.current.children.forEach((spark) => {
        spark.position.y += Math.random() * 0.02
        spark.position.x += (Math.random() - 0.5) * 0.01
        spark.position.z += (Math.random() - 0.5) * 0.01

        if (spark.position.y > 0.5) {
          spark.position.y = 0.2
          spark.position.x = (Math.random() - 0.5) * 0.1
          spark.position.z = (Math.random() - 0.5) * 0.1
        }
      })
    }
  })

  return (
    <group ref={stationRef} position={position}>
      <mesh position={[0, -0.1, 0]}>
        <cylinderGeometry args={[0.4, 0.4, 0.1]} />
        <meshStandardMaterial color="#1E40AF" metalness={0.6} roughness={0.4} />
      </mesh>

      <mesh position={[-0.2, 0.1, 0]}>
        <boxGeometry args={[0.15, 0.3, 0.08]} />
        <meshStandardMaterial color="#374151" metalness={0.7} roughness={0.3} />
      </mesh>

      <mesh ref={toolRef} position={[-0.2, 0.2, 0]}>
        <cylinderGeometry args={[0.02, 0.02, 0.15]} />
        <meshStandardMaterial
          color={isActive ? "#F59E0B" : "#6B7280"}
          emissive={isActive ? "#F59E0B" : "#000000"}
          emissiveIntensity={isActive ? 0.3 : 0}
        />
      </mesh>

      <mesh ref={repairArmRef} position={[0.2, 0.2, 0]}>
        <boxGeometry args={[0.08, 0.25, 0.06]} />
        <meshStandardMaterial
          color={currentOperation?.status === "in-progress" ? "#10B981" : "#4B5563"}
          emissive={currentOperation?.status === "in-progress" ? "#10B981" : "#000000"}
          emissiveIntensity={currentOperation?.status === "in-progress" ? 0.4 : 0}
        />
      </mesh>

      <mesh ref={diagnosticRef} position={[0.2, 0.15, 0]}>
        <boxGeometry args={[0.12, 0.12, 0.06]} />
        <meshStandardMaterial
          color={isActive ? "#8B5CF6" : "#4B5563"}
          emissive={isActive ? "#8B5CF6" : "#000000"}
          emissiveIntensity={isActive ? 0.5 : 0}
        />
      </mesh>

      {currentOperation?.status === "in-progress" && (
        <group ref={sparksRef}>
          {Array.from({ length: 8 }).map((_, index) => (
            <mesh key={index} position={[Math.random() * 0.1 - 0.05, 0.2, Math.random() * 0.1 - 0.05]}>
              <sphereGeometry args={[0.005]} />
              <meshBasicMaterial color="#FFD700" />
            </mesh>
          ))}
        </group>
      )}

      {isActive && (
        <mesh position={[0, 0.4, 0]}>
          <planeGeometry args={[0.3, 0.2]} />
          <meshBasicMaterial color="#00FFFF" transparent opacity={0.6} blending={THREE.AdditiveBlending} />
        </mesh>
      )}

      {isActive && (
        <Html position={[0, 0.6, 0]} center>
          <div className="bg-blue-900/70 backdrop-blur-sm border border-blue-500/70 rounded-lg px-3 py-2 text-xs text-blue-300 font-mono">
            <div className="flex items-center gap-2 mb-1">
              <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
              HERMES REPAIR STATION
            </div>
            {currentOperation ? (
              <>
                <div className="text-xs text-blue-400/70">Target: {currentOperation.satelliteName}</div>
                <div className="text-xs text-blue-400/70">Operation: {currentOperation.operation.toUpperCase()}</div>
                <div className="text-xs text-blue-400/70">Component: {currentOperation.component}</div>
                <div className="text-xs text-blue-400/70">Progress: {Math.round(currentOperation.progress)}%</div>
                <Progress
                  value={currentOperation.progress}
                  className="w-20 h-1 bg-blue-900 rounded-full mt-1 border border-blue-500/40 [&_[data-slot=progress-indicator]]:bg-blue-400"
                />
              </>
            ) : (
              <div className="text-xs text-blue-400/70">
                STANDBY MODE
                <br />
                Awaiting assignment...
              </div>
            )}
          </div>
        </Html>
      )}
    </group>
  )
}

interface SatelliteInteriorSceneProps {
  activeSystem: string | null
  currentOperation?: RepairOperation
}

export default function SatelliteInteriorScene({
  activeSystem,
  currentOperation,
}: SatelliteInteriorSceneProps) {
  return (
    <ClientOnlyWrapper>
      <Canvas camera={{ position: [3, 2.5, 3], fov: 60 }}>
        <ambientLight intensity={0.5} />
        <pointLight position={[2, 2, 2]} intensity={1.2} color="#ffffff" />
        <pointLight position={[-2, 1, -1]} intensity={0.8} color="#3B82F6" />
        <spotLight position={[0, 3, 0]} intensity={1} angle={0.6} penumbra={0.5} />
        <pointLight position={[0, 1, 2]} intensity={0.6} color="#10B981" />

        <Environment preset="warehouse" />

        <mesh position={[0, 0, -2]}>
          <boxGeometry args={[4, 3, 0.1]} />
          <meshStandardMaterial color="#1E293B" metalness={0.3} roughness={0.7} />
        </mesh>
        <mesh position={[-2, 0, 0]} rotation={[0, Math.PI / 2, 0]}>
          <boxGeometry args={[4, 3, 0.1]} />
          <meshStandardMaterial color="#1E293B" metalness={0.3} roughness={0.7} />
        </mesh>
        <mesh position={[2, 0, 0]} rotation={[0, -Math.PI / 2, 0]}>
          <boxGeometry args={[4, 3, 0.1]} />
          <meshStandardMaterial color="#1E293B" metalness={0.3} roughness={0.7} />
        </mesh>

        <mesh position={[0, -1.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>
          <boxGeometry args={[4, 4, 0.1]} />
          <meshStandardMaterial color="#0F172A" metalness={0.5} roughness={0.5} />
        </mesh>

        <DebrisCollectionArm
          position={[-1.2, -0.5, 1]}
          rotation={[0, -Math.PI / 4, 0]}
          isActive={activeSystem === "debris-collector"}
        />
        <RepairStation
          position={[1.2, -0.8, 1]}
          isActive={activeSystem === "repair-station"}
          currentOperation={currentOperation}
        />
        <Furnace position={[0, -0.5, -1.2]} isActive={activeSystem === "furnace"} />
        <Printer3D position={[1.2, -0.5, -1.2]} isActive={activeSystem === "printer"} />
        <RoboticArm position={[-1.2, -0.5, -0.2]} rotation={[0, Math.PI / 6, 0]} isActive={activeSystem === "arm1"} />
        <RoboticArm position={[0.8, -0.5, 0.2]} rotation={[0, -Math.PI / 3, 0]} isActive={activeSystem === "arm2"} />

        <OrbitControls enablePan enableZoom enableRotate minDistance={2} maxDistance={10} maxPolarAngle={Math.PI / 2} />
      </Canvas>
    </ClientOnlyWrapper>
  )
}
